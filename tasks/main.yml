---
- name: "Compute SFTP users."
  set_fact:
    _sftp_users: >-
      [{% for sftp_user in sftp_users -%}
        {{ sftp_user | combine({'home': sftp_user.home | default(sftp_home_partition + '/' + sftp_user.name) }) }}
        {{ '' if loop.last else ',' }}
      {%- endfor %}]

# Creates group for SFTP users.
- name: SFTP-Server | Create sftp user group
  group:
    name: "{{ sftp_group_name }}"
    state: present

# Necessary for chrooting of SFTP users.
- name: SFTP-Server | Alter sftp subsystem entry
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^Subsystem(\s+)sftp'
    line: "Subsystem sftp internal-sftp -f AUTH -l VERBOSE"
    state: present
  notify: SFTP-Server | Restart sshd
  when: sftp_configure_sshd

- name: SFTP-Server | Ensure SELinux management package is present
  package:
    name: "{{ 'python-semanage' if ansible_distribution == 'Debian' else 'libsemanage-python' }}"
    state: present
  when: ansible_selinux and sftp_enable_selinux_support

- name: SFTP-Server | Set SELinux booleans
  seboolean:
    name: "{{ item }}"
    state: yes
    persistent: yes
  with_items:
    - ssh_chroot_full_access
    - ssh_chroot_rw_homedirs
  when: ansible_selinux and sftp_enable_selinux_support

- name: SFTP-Server | Add sshd_config block
  blockinfile:
    dest: /etc/ssh/sshd_config
    marker: "# {mark} SFTP-Server {{ sftp_group_name }} block"
    block: |
      Match Group {{ sftp_group_name }}
          ChrootDirectory %h
          AllowTCPForwarding no
          PermitTunnel no
          X11Forwarding no
          ForceCommand internal-sftp {{ sftp_enable_logging | ternary('-l VERBOSE', '') }} {{ (sftp_start_directory in sftp_directories or sftp_start_directory in sftp_directories | selectattr("name", "defined") | map(attribute='name') | list) | ternary('-d /' + sftp_start_directory, '') }}
          PasswordAuthentication {{ sftp_allow_passwords | ternary('yes', 'no') }}
  notify: SFTP-Server | Restart sshd
  when: sftp_configure_sshd

- name: SFTP-Server | Create sftp user's group
  group:
    name: "{{ item }}"
    state: present
  with_items: "{{ _sftp_users | selectattr('group', 'defined') | map(attribute='group') | list }}"

# Create each SFTP user with home directory on the correct partition, and add to SFTP group.
- name: SFTP-Server | Create sftp users
  user:
    name: "{{ item.name }}"
    group: "{{ item.group | default(omit) }}"
    groups: "{{ sftp_group_name }}"
    append: "{{ item.append | default(False) }}"
    home: "{{ item.home }}"
    # `None` means default value -> default is to have no login shell
    shell: "{{ None if (item.shell | default(sftp_login_shell) | default(False)) else sftp_nologin_shell }}"
    skeleton: "{{ item.skeleton | default(sftp_home_skeleton) | default(omit) }}"
    state: present
  with_items: "{{ _sftp_users }}"

# A working chrooted SFTP setup requires root:sftgroup ownership of a user's home directory.
- name: SFTP-Server | Root SFTP permissions
  file:
    path: "{{ sftp_home_partition }}"
    state: directory
    mode: 0750
    group: "{{ sftp_group_name }}"
    owner: root

- name: SFTP-Server | Correct ownership and permission of home directories
  file:
    path: "{{ item.home }}"
    owner: root
    group: "{{ item.group | default(sftp_group_name) }}"
    mode: "{{ item.mode | default(0750) }}"
  with_items: "{{ _sftp_users }}"

# Install all relevant public keys.
- name: SFTP-Server | Install public keys
  authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ lookup('file', item.1) }}"
  with_subelements:
    - "{{ _sftp_users }}"
    - authorized
    - flags:
      skip_missing: True

# Update user passwords, if they were specified.
- name: SFTP-Server | Update user passwords
  user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
  with_items: "{{ _sftp_users }}"
  when: item.password is defined

# Create directories for all SFTP users. Optional, but recommended.
- name: SFTP-Server | Create directories
  file:
    path: "{{ item[0].home }}/{{ item[1].name | default(item[1]) }}"
    owner: "{{ item[0].name }}"
    group: "{{ item[0].group | default(item[0].name) }}"
    mode: "{{ item[1].mode | default(0750) }}"
    state: directory
  with_nested:
    - "{{ _sftp_users }}"
    - "{{ sftp_directories }}"

# Create directories for individual SFTP users. Optional.
- name: SFTP-Server | Create directories per user
  file:
    path: "{{ item[0].home }}/{{ item[1].name | default(item[1]) }}"
    owner: "{{ item[0].name }}"
    group: "{{ item[0].group | default(item[0].name) }}"
    mode: "{{ item[1].mode | default(0750) }}"
    state: directory
  with_subelements:
    - "{{ _sftp_users }}"
    - "sftp_directories"
    - flags:
      skip_missing: True

- name: SFTP-Server | Create dev directory for logging
  file:
    path: "{{ item.home }}/dev"
    owner: root
    group: root
    state: directory
  with_items:
    - "{{ _sftp_users }}"
  when: sftp_enable_logging

- name: SFTP-Server | Enable Logging
  blockinfile:
    dest: "/etc/rsyslog.d/sshd.conf"
    create: yes
    block: |
      # Create an additional socket for some of the sshd chrooted users.
      {% for user in sftp_users %}
      $AddUnixListenSocket {{ sftp_home_partition }}/{{ user.name }}/dev/log
      {% endfor %}

      # Log internal-sftp in a separate file
      :programname, isequal, "internal-sftp" -/var/log/sftp/verbose.log
      :programname, isequal, "internal-sftp" ~
  when: sftp_enable_logging
  notify: SFTP-Server | Restart rsyslog

# Restart sshd to ensure all configuration has been applied. This should always be the last task.
- name: SFTP-Server | Restart sshd
  service:
    name: "{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}"
    state: restarted
  ignore_errors: Yes
