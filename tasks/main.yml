---
# Creates group for SFTP users.
- name: SFTP-Server | Create sftp user group
  group:
    name: "{{ item.name }}"
    state: present
    gid: "{{ item.gid | default(omit) }}"
  with_items:
    - "{{ sftp_groups }}"

# Necessary for chrooting of SFTP users.
- name: SFTP-Server | Alter sftp subsystem entry
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^Subsystem(\s+)sftp'
    line: "Subsystem sftp internal-sftp -f AUTH -l VERBOSE"
    state: present
  notify: SFTP-Server | Restart sshd

- name: SFTP-Server | Add sshd_config block
  blockinfile:
    dest: /etc/ssh/sshd_config
    marker: '# {mark} SFTP-Server {{ item.name }} block'
    block: |
      Match Group {{ item.name }}
          ChrootDirectory %h
          AllowTCPForwarding no
          X11Forwarding no
          ForceCommand internal-sftp {{ sftp_enable_logging | ternary('-l VERBOSE', '') }} {% if item.readonly is defined and item.readonly %}-R{% endif %}

          PasswordAuthentication {{ sftp_allow_passwords | ternary('yes', 'no') }}
  notify: SFTP-Server | Restart sshd
  with_items:
    - "{{ sftp_groups }}"

# Create each SFTP user with home directory on the correct partition, and add to SFTP group.
- name: SFTP-Server | Create sftp users
  user:
    name: "{{ item.name }}"
    groups: "{{ item.groups | default(omit) }}"
    append: "{{ item.append | default(False) }}"
    home: "{{ item.home }}"
    uid: "{{ item.uid | default(omit) }}"
    # `None` means default value -> default is to have a shell
    shell: "{{ None if (item.shell | default(True)) else sftp_nologin_shell }}"
    state: present
  with_items: "{{ sftp_users }}"

# A working chrooted SFTP setup requires root:sftgroup ownership of a user's home directory.
- name: SFTP-Server | Correct ownership and permission of home directories
  file:
    path: "{{ item.home }}"
    owner: root
    group: "{{ sftp_chroot_group }}"
    mode: "0750"
  with_items: "{{ sftp_users }}"

# Install all relevant public keys.
- name: SFTP-Server | Install public keys
  authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ lookup('file', item.1) }}"
  with_subelements:
    - "{{ sftp_users }}"
    - authorized
    - flags:
      skip_missing: True

# Update user passwords, if they were specified.
- name: SFTP-Server | Update user passwords
  user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
  with_items: "{{ sftp_users }}"
  when: "{{ item.update_password | default(False) }}"

# Create directories for all SFTP users. Optional, but recommended.
- name: SFTP-Server | Create directories
  file:
    path: "{{ item[0].home }}/{{ item[1].name | default(item[1]) }}"
    owner: "{{ item[1].owner | default(item[0].name) }}"
    group: "{{ item[1].group | default(item[0].name) }}"
    mode: "{{ item[1].mode | default(0750) }}"
    state: directory
  with_nested:
    - "{{ sftp_users }}"
    - "{{ sftp_directories }}"

# Create directories for individual SFTP users. Optional.
- name: SFTP-Server | Create directories per user
  file:
    path: "{{ item[0].home }}/{{ item[1].name | default(item[1]) }}"
    owner: "{{ item[1].owner | default(item[0].name) }}"
    group: "{{ item[1].group | default(item[0].name) }}"
    mode: "{{ item[1].mode | default(0750) }}"
    state: directory
  with_subelements:
    - "{{ sftp_users }}"
    - "sftp_directories"
    - flags:
      skip_missing: True

- name: SFTP-Server | Create dev directory for logging
  file:
    path: "{{ item.home }}/dev"
    owner: root
    group: root
    state: directory
  with_items:
    - "{{ sftp_users }}"
  when: sftp_enable_logging

- name: SFTP-Server | Enable Logging
  blockinfile:
    dest: "/etc/rsyslog.d/sshd.conf"
    create: yes
    block: |
      # Create an additional socket for some of the sshd chrooted users.
      {% for user in sftp_users %}
      $AddUnixListenSocket {{ user.home }}/dev/log
      {% endfor %}

      # Log internal-sftp in a separate file
      :programname, isequal, "internal-sftp" -/var/log/sftp/verbose.log
      :programname, isequal, "internal-sftp" ~

      # additionally write an auth log
      auth,authpriv.*  /var/log/sftp/auth.log
  when: sftp_enable_logging
  notify: SFTP-Server | Restart rsyslog

# Handle with custom sftp_host_keys
  - name: SFTP-Server | Create SSH host keys
    copy:
      path: "/etc/ssh/ssh_host_{{ item.key }}_key.pub"
      owner: root
      group: root
      mode: 0644
      content: "{{ item.value }}"
    when: sftp_host_keys is defined
    with_dict: "{{ sftp_host_keys }}"
